//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2Apex_Flow {

	public class ProcessMetadataValues {

		public ProcessMetadataValues(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'ProcessMetadataValues consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Connector {
		public Object isGoTo {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public String targetReference {get;set;} 

		public Connector(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'isGoTo') {
							isGoTo = parser.readValueAs(Object.class);
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'targetReference') {
							targetReference = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Connector consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ActionCalls {
		public String actionName {get;set;} 
		public String actionType {get;set;} 
		public Connector connector {get;set;} 
		public List<ProcessMetadataValues> dataTypeMappings {get;set;} 
		public Object description {get;set;} 
		public Object elementSubtype {get;set;} 
		public Object faultConnector {get;set;} 
		public String flowTransactionModel {get;set;} 
		public List<InputParameters> inputParameters {get;set;} 
		public String label {get;set;} 
		public Integer locationX {get;set;} 
		public Integer locationY {get;set;} 
		public String name {get;set;} 
		public List<ProcessMetadataValues> outputParameters {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public Object storeOutputAutomatically {get;set;} 

		public ActionCalls(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'actionName') {
							actionName = parser.getText();
						} else if (text == 'actionType') {
							actionType = parser.getText();
						} else if (text == 'connector') {
							connector = new Connector(parser);
						} else if (text == 'dataTypeMappings') {
							dataTypeMappings = arrayOfProcessMetadataValues(parser);
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'elementSubtype') {
							elementSubtype = parser.readValueAs(Object.class);
						} else if (text == 'faultConnector') {
							faultConnector = parser.readValueAs(Object.class);
						} else if (text == 'flowTransactionModel') {
							flowTransactionModel = parser.getText();
						} else if (text == 'inputParameters') {
							inputParameters = arrayOfInputParameters(parser);
						} else if (text == 'label') {
							label = parser.getText();
						} else if (text == 'locationX') {
							locationX = parser.getIntegerValue();
						} else if (text == 'locationY') {
							locationY = parser.getIntegerValue();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'outputParameters') {
							outputParameters = arrayOfProcessMetadataValues(parser);
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'storeOutputAutomatically') {
							storeOutputAutomatically = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'ActionCalls consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Start {
		public Connector connector {get;set;} 
		public Object description {get;set;} 
		public Object doesRequireRecordChangedToMeetCriteria {get;set;} 
		public Object elementSubtype {get;set;} 
		public Object filterFormula {get;set;} 
		public Object filterLogic {get;set;} 
		public List<ProcessMetadataValues> filters {get;set;} 
		public Object label {get;set;} 
		public Integer locationX {get;set;} 
		public Integer locationY {get;set;} 
		public Object name {get;set;} 
		public Object object_Z {get;set;} // in json: object
		public Object objectContainer {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public Object recordTriggerType {get;set;} 
		public Object schedule {get;set;} 
		public List<ProcessMetadataValues> scheduledPaths {get;set;} 
		public Object segment {get;set;} 
		public Object triggerType {get;set;} 

		public Start(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'connector') {
							connector = new Connector(parser);
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'doesRequireRecordChangedToMeetCriteria') {
							doesRequireRecordChangedToMeetCriteria = parser.readValueAs(Object.class);
						} else if (text == 'elementSubtype') {
							elementSubtype = parser.readValueAs(Object.class);
						} else if (text == 'filterFormula') {
							filterFormula = parser.readValueAs(Object.class);
						} else if (text == 'filterLogic') {
							filterLogic = parser.readValueAs(Object.class);
						} else if (text == 'filters') {
							filters = arrayOfProcessMetadataValues(parser);
						} else if (text == 'label') {
							label = parser.readValueAs(Object.class);
						} else if (text == 'locationX') {
							locationX = parser.getIntegerValue();
						} else if (text == 'locationY') {
							locationY = parser.getIntegerValue();
						} else if (text == 'name') {
							name = parser.readValueAs(Object.class);
						} else if (text == 'object') {
							object_Z = parser.readValueAs(Object.class);
						} else if (text == 'objectContainer') {
							objectContainer = parser.readValueAs(Object.class);
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'recordTriggerType') {
							recordTriggerType = parser.readValueAs(Object.class);
						} else if (text == 'schedule') {
							schedule = parser.readValueAs(Object.class);
						} else if (text == 'scheduledPaths') {
							scheduledPaths = arrayOfProcessMetadataValues(parser);
						} else if (text == 'segment') {
							segment = parser.readValueAs(Object.class);
						} else if (text == 'triggerType') {
							triggerType = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Start consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Attributes {
		public String type {get;set;} 
		public String url {get;set;} 

		public Attributes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type = parser.getText();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Attributes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Metadata {
		public List<ActionCalls> actionCalls {get;set;} 
		public List<ProcessMetadataValues> apexPluginCalls {get;set;} 
		public Double apiVersion {get;set;} 
		public List<ProcessMetadataValues> assignments {get;set;} 
		public List<ProcessMetadataValues> choices {get;set;} 
		public List<ProcessMetadataValues> collectionProcessors {get;set;} 
		public List<Constants> constants {get;set;} 
		public List<ProcessMetadataValues> decisions {get;set;} 
		public Object description {get;set;} 
		public List<ProcessMetadataValues> dynamicChoiceSets {get;set;} 
		public List<String> environments {get;set;} 
		public List<ProcessMetadataValues> formulas {get;set;} 
		public String interviewLabel {get;set;} 
		public Object isAdditionalPermissionRequiredToRun {get;set;} 
		public Object isOverridable {get;set;} 
		public Object isTemplate {get;set;} 
		public String label {get;set;} 
		public List<ProcessMetadataValues> loops {get;set;} 
		public Object migratedFromWorkflowRuleName {get;set;} 
		public List<ProcessMetadataValues> orchestratedStages {get;set;} 
		public Object overriddenFlow {get;set;} 
		public List<ProcessMetadataValues_Z> processMetadataValues {get;set;} 
		public String processType {get;set;} 
		public List<ProcessMetadataValues> recordCreates {get;set;} 
		public List<ProcessMetadataValues> recordDeletes {get;set;} 
		public List<ProcessMetadataValues> recordLookups {get;set;} 
		public List<ProcessMetadataValues> recordRollbacks {get;set;} 
		public List<ProcessMetadataValues> recordUpdates {get;set;} 
		public Object runInMode {get;set;} 
		public List<Screens> screens {get;set;} 
		public Object sourceTemplate {get;set;} 
		public Start start {get;set;} 
		public Object startElementReference {get;set;} 
		public String status {get;set;} 
		public List<ProcessMetadataValues> steps {get;set;} 
		public List<ProcessMetadataValues> subflows {get;set;} 
		public List<ProcessMetadataValues> textTemplates {get;set;} 
		public Object timeZoneSidKey {get;set;} 
		public List<ProcessMetadataValues> transforms {get;set;} 
		public Object triggerOrder {get;set;} 
		public Object urls {get;set;} 
		public List<Variables> variables {get;set;} 
		public List<ProcessMetadataValues> waits {get;set;} 

		public Metadata(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'actionCalls') {
							actionCalls = arrayOfActionCalls(parser);
						} else if (text == 'apexPluginCalls') {
							apexPluginCalls = arrayOfProcessMetadataValues(parser);
						} else if (text == 'apiVersion') {
							apiVersion = parser.getDoubleValue();
						} else if (text == 'assignments') {
							assignments = arrayOfProcessMetadataValues(parser);
						} else if (text == 'choices') {
							choices = arrayOfProcessMetadataValues(parser);
						} else if (text == 'collectionProcessors') {
							collectionProcessors = arrayOfProcessMetadataValues(parser);
						} else if (text == 'constants') {
							constants = arrayOfConstants(parser);
						} else if (text == 'decisions') {
							decisions = arrayOfProcessMetadataValues(parser);
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'dynamicChoiceSets') {
							dynamicChoiceSets = arrayOfProcessMetadataValues(parser);
						} else if (text == 'environments') {
							environments = arrayOfString(parser);
						} else if (text == 'formulas') {
							formulas = arrayOfProcessMetadataValues(parser);
						} else if (text == 'interviewLabel') {
							interviewLabel = parser.getText();
						} else if (text == 'isAdditionalPermissionRequiredToRun') {
							isAdditionalPermissionRequiredToRun = parser.readValueAs(Object.class);
						} else if (text == 'isOverridable') {
							isOverridable = parser.readValueAs(Object.class);
						} else if (text == 'isTemplate') {
							isTemplate = parser.readValueAs(Object.class);
						} else if (text == 'label') {
							label = parser.getText();
						} else if (text == 'loops') {
							loops = arrayOfProcessMetadataValues(parser);
						} else if (text == 'migratedFromWorkflowRuleName') {
							migratedFromWorkflowRuleName = parser.readValueAs(Object.class);
						} else if (text == 'orchestratedStages') {
							orchestratedStages = arrayOfProcessMetadataValues(parser);
						} else if (text == 'overriddenFlow') {
							overriddenFlow = parser.readValueAs(Object.class);
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues_Z(parser);
						} else if (text == 'processType') {
							processType = parser.getText();
						} else if (text == 'recordCreates') {
							recordCreates = arrayOfProcessMetadataValues(parser);
						} else if (text == 'recordDeletes') {
							recordDeletes = arrayOfProcessMetadataValues(parser);
						} else if (text == 'recordLookups') {
							recordLookups = arrayOfProcessMetadataValues(parser);
						} else if (text == 'recordRollbacks') {
							recordRollbacks = arrayOfProcessMetadataValues(parser);
						} else if (text == 'recordUpdates') {
							recordUpdates = arrayOfProcessMetadataValues(parser);
						} else if (text == 'runInMode') {
							runInMode = parser.readValueAs(Object.class);
						} else if (text == 'screens') {
							screens = arrayOfScreens(parser);
						} else if (text == 'sourceTemplate') {
							sourceTemplate = parser.readValueAs(Object.class);
						} else if (text == 'start') {
							start = new Start(parser);
						} else if (text == 'startElementReference') {
							startElementReference = parser.readValueAs(Object.class);
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'steps') {
							steps = arrayOfProcessMetadataValues(parser);
						} else if (text == 'subflows') {
							subflows = arrayOfProcessMetadataValues(parser);
						} else if (text == 'textTemplates') {
							textTemplates = arrayOfProcessMetadataValues(parser);
						} else if (text == 'timeZoneSidKey') {
							timeZoneSidKey = parser.readValueAs(Object.class);
						} else if (text == 'transforms') {
							transforms = arrayOfProcessMetadataValues(parser);
						} else if (text == 'triggerOrder') {
							triggerOrder = parser.readValueAs(Object.class);
						} else if (text == 'urls') {
							urls = parser.readValueAs(Object.class);
						} else if (text == 'variables') {
							variables = arrayOfVariables(parser);
						} else if (text == 'waits') {
							waits = arrayOfProcessMetadataValues(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Metadata consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Constants {
		public String dataType {get;set;} 
		public Object description {get;set;} 
		public String name {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public Value value {get;set;} 

		public Constants(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'dataType') {
							dataType = parser.getText();
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'value') {
							value = new Value(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Constants consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Value_Z {
		public Object apexValue {get;set;} 
		public Object booleanValue {get;set;} 
		public Object dateTimeValue {get;set;} 
		public Object dateValue {get;set;} 
		public String elementReference {get;set;} 
		public Object numberValue {get;set;} 
		public Object sobjectValue {get;set;} 
		public Object stringValue {get;set;} 

		public Value_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'apexValue') {
							apexValue = parser.readValueAs(Object.class);
						} else if (text == 'booleanValue') {
							booleanValue = parser.readValueAs(Object.class);
						} else if (text == 'dateTimeValue') {
							dateTimeValue = parser.readValueAs(Object.class);
						} else if (text == 'dateValue') {
							dateValue = parser.readValueAs(Object.class);
						} else if (text == 'elementReference') {
							elementReference = parser.getText();
						} else if (text == 'numberValue') {
							numberValue = parser.readValueAs(Object.class);
						} else if (text == 'sobjectValue') {
							sobjectValue = parser.readValueAs(Object.class);
						} else if (text == 'stringValue') {
							stringValue = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Value_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Attributes attributes {get;set;} 
	public String Id {get;set;} 
	public String DefinitionId {get;set;} 
	public String MasterLabel {get;set;} 
	public String ManageableState {get;set;} 
	public Integer VersionNumber {get;set;} 
	public String Status {get;set;} 
	public Object Description {get;set;} 
	public String ProcessType {get;set;} 
	public String CreatedDate {get;set;} 
	public String CreatedById {get;set;} 
	public String LastModifiedDate {get;set;} 
	public String LastModifiedById {get;set;} 
	public Metadata Metadata {get;set;} 
	public String FullName {get;set;} 
	public Boolean IsTemplate {get;set;} 
	public Boolean IsOverridable {get;set;} 
	public Object SourceTemplate {get;set;} 
	public Object OverriddenFlow {get;set;} 
	public Object TriggerOrder {get;set;} 
	public Object RunInMode {get;set;} 
	public Double ApiVersion {get;set;} 
	public String Environments {get;set;} 
	public Object TimeZoneSidKey {get;set;} 

	public JSON2Apex_Flow(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'attributes') {
						attributes = new Attributes(parser);
					} else if (text == 'Id') {
						Id = parser.getText();
					} else if (text == 'DefinitionId') {
						DefinitionId = parser.getText();
					} else if (text == 'MasterLabel') {
						MasterLabel = parser.getText();
					} else if (text == 'ManageableState') {
						ManageableState = parser.getText();
					} else if (text == 'VersionNumber') {
						VersionNumber = parser.getIntegerValue();
					} else if (text == 'Status') {
						Status = parser.getText();
					} else if (text == 'Description') {
						Description = parser.readValueAs(Object.class);
					} else if (text == 'ProcessType') {
						ProcessType = parser.getText();
					} else if (text == 'CreatedDate') {
						CreatedDate = parser.getText();
					} else if (text == 'CreatedById') {
						CreatedById = parser.getText();
					} else if (text == 'LastModifiedDate') {
						LastModifiedDate = parser.getText();
					} else if (text == 'LastModifiedById') {
						LastModifiedById = parser.getText();
					} else if (text == 'Metadata') {
						Metadata = new Metadata(parser);
					} else if (text == 'FullName') {
						FullName = parser.getText();
					} else if (text == 'IsTemplate') {
						IsTemplate = parser.getBooleanValue();
					} else if (text == 'IsOverridable') {
						IsOverridable = parser.getBooleanValue();
					} else if (text == 'SourceTemplate') {
						SourceTemplate = parser.readValueAs(Object.class);
					} else if (text == 'OverriddenFlow') {
						OverriddenFlow = parser.readValueAs(Object.class);
					} else if (text == 'TriggerOrder') {
						TriggerOrder = parser.readValueAs(Object.class);
					} else if (text == 'RunInMode') {
						RunInMode = parser.readValueAs(Object.class);
					} else if (text == 'ApiVersion') {
						ApiVersion = parser.getDoubleValue();
					} else if (text == 'Environments') {
						Environments = parser.getText();
					} else if (text == 'TimeZoneSidKey') {
						TimeZoneSidKey = parser.readValueAs(Object.class);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex_Flow consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Screens {
		public Boolean allowBack {get;set;} 
		public Boolean allowFinish {get;set;} 
		public Boolean allowPause {get;set;} 
		public Object backButtonLabel {get;set;} 
		public Object connector {get;set;} 
		public Object description {get;set;} 
		public Object elementSubtype {get;set;} 
		public List<Fields> fields {get;set;} 
		public Object helpText {get;set;} 
		public String label {get;set;} 
		public Integer locationX {get;set;} 
		public Integer locationY {get;set;} 
		public String name {get;set;} 
		public Object nextOrFinishButtonLabel {get;set;} 
		public Object pauseButtonLabel {get;set;} 
		public Object pausedText {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public List<ProcessMetadataValues> rules {get;set;} 
		public Boolean showFooter {get;set;} 
		public Boolean showHeader {get;set;} 

		public Screens(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'allowBack') {
							allowBack = parser.getBooleanValue();
						} else if (text == 'allowFinish') {
							allowFinish = parser.getBooleanValue();
						} else if (text == 'allowPause') {
							allowPause = parser.getBooleanValue();
						} else if (text == 'backButtonLabel') {
							backButtonLabel = parser.readValueAs(Object.class);
						} else if (text == 'connector') {
							connector = parser.readValueAs(Object.class);
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'elementSubtype') {
							elementSubtype = parser.readValueAs(Object.class);
						} else if (text == 'fields') {
							fields = arrayOfFields(parser);
						} else if (text == 'helpText') {
							helpText = parser.readValueAs(Object.class);
						} else if (text == 'label') {
							label = parser.getText();
						} else if (text == 'locationX') {
							locationX = parser.getIntegerValue();
						} else if (text == 'locationY') {
							locationY = parser.getIntegerValue();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'nextOrFinishButtonLabel') {
							nextOrFinishButtonLabel = parser.readValueAs(Object.class);
						} else if (text == 'pauseButtonLabel') {
							pauseButtonLabel = parser.readValueAs(Object.class);
						} else if (text == 'pausedText') {
							pausedText = parser.readValueAs(Object.class);
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'rules') {
							rules = arrayOfProcessMetadataValues(parser);
						} else if (text == 'showFooter') {
							showFooter = parser.getBooleanValue();
						} else if (text == 'showHeader') {
							showHeader = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Screens consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Variables {
		public Object apexClass {get;set;} 
		public String dataType {get;set;} 
		public Object description {get;set;} 
		public Boolean isCollection {get;set;} 
		public Boolean isInput {get;set;} 
		public Boolean isOutput {get;set;} 
		public String name {get;set;} 
		public String objectType {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public Object scale {get;set;} 
		public Object value {get;set;} 

		public Variables(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'apexClass') {
							apexClass = parser.readValueAs(Object.class);
						} else if (text == 'dataType') {
							dataType = parser.getText();
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'isCollection') {
							isCollection = parser.getBooleanValue();
						} else if (text == 'isInput') {
							isInput = parser.getBooleanValue();
						} else if (text == 'isOutput') {
							isOutput = parser.getBooleanValue();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'objectType') {
							objectType = parser.getText();
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'scale') {
							scale = parser.readValueAs(Object.class);
						} else if (text == 'value') {
							value = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Variables consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ProcessMetadataValues_Z {
		public String name {get;set;} 
		public Value value {get;set;} 

		public ProcessMetadataValues_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'value') {
							value = new Value(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ProcessMetadataValues_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fields {
		public Object choiceReferences {get;set;} 
		public Object dataType {get;set;} 
		public List<ProcessMetadataValues> dataTypeMappings {get;set;} 
		public Object defaultSelectedChoiceReference {get;set;} 
		public Object defaultValue {get;set;} 
		public Object description {get;set;} 
		public Object extensionName {get;set;} 
		public String fieldText {get;set;} 
		public String fieldType {get;set;} 
		public List<ProcessMetadataValues> fields {get;set;} 
		public Object helpText {get;set;} 
		public List<ProcessMetadataValues> inputParameters {get;set;} 
		public Object inputsOnNextNavToAssocScrn {get;set;} 
		public Object isRequired {get;set;} 
		public Object isVisible {get;set;} 
		public String name {get;set;} 
		public Object objectFieldReference {get;set;} 
		public List<ProcessMetadataValues> outputParameters {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public Object regionContainerType {get;set;} 
		public Object scale {get;set;} 
		public Object storeOutputAutomatically {get;set;} 
		public Object validationRule {get;set;} 
		public Object visibilityRule {get;set;} 

		public Fields(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'choiceReferences') {
							choiceReferences = parser.readValueAs(Object.class);
						} else if (text == 'dataType') {
							dataType = parser.readValueAs(Object.class);
						} else if (text == 'dataTypeMappings') {
							dataTypeMappings = arrayOfProcessMetadataValues(parser);
						} else if (text == 'defaultSelectedChoiceReference') {
							defaultSelectedChoiceReference = parser.readValueAs(Object.class);
						} else if (text == 'defaultValue') {
							defaultValue = parser.readValueAs(Object.class);
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'extensionName') {
							extensionName = parser.readValueAs(Object.class);
						} else if (text == 'fieldText') {
							fieldText = parser.getText();
						} else if (text == 'fieldType') {
							fieldType = parser.getText();
						} else if (text == 'fields') {
							fields = arrayOfProcessMetadataValues(parser);
						} else if (text == 'helpText') {
							helpText = parser.readValueAs(Object.class);
						} else if (text == 'inputParameters') {
							inputParameters = arrayOfProcessMetadataValues(parser);
						} else if (text == 'inputsOnNextNavToAssocScrn') {
							inputsOnNextNavToAssocScrn = parser.readValueAs(Object.class);
						} else if (text == 'isRequired') {
							isRequired = parser.readValueAs(Object.class);
						} else if (text == 'isVisible') {
							isVisible = parser.readValueAs(Object.class);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'objectFieldReference') {
							objectFieldReference = parser.readValueAs(Object.class);
						} else if (text == 'outputParameters') {
							outputParameters = arrayOfProcessMetadataValues(parser);
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'regionContainerType') {
							regionContainerType = parser.readValueAs(Object.class);
						} else if (text == 'scale') {
							scale = parser.readValueAs(Object.class);
						} else if (text == 'storeOutputAutomatically') {
							storeOutputAutomatically = parser.readValueAs(Object.class);
						} else if (text == 'validationRule') {
							validationRule = parser.readValueAs(Object.class);
						} else if (text == 'visibilityRule') {
							visibilityRule = parser.readValueAs(Object.class);
						} else {
							System.debug(LoggingLevel.WARN, 'Fields consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Value {
		public Object apexValue {get;set;} 
		public Object booleanValue {get;set;} 
		public Object dateTimeValue {get;set;} 
		public Object dateValue {get;set;} 
		public Object elementReference {get;set;} 
		public Object numberValue {get;set;} 
		public Object sobjectValue {get;set;} 
		public String stringValue {get;set;} 

		public Value(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'apexValue') {
							apexValue = parser.readValueAs(Object.class);
						} else if (text == 'booleanValue') {
							booleanValue = parser.readValueAs(Object.class);
						} else if (text == 'dateTimeValue') {
							dateTimeValue = parser.readValueAs(Object.class);
						} else if (text == 'dateValue') {
							dateValue = parser.readValueAs(Object.class);
						} else if (text == 'elementReference') {
							elementReference = parser.readValueAs(Object.class);
						} else if (text == 'numberValue') {
							numberValue = parser.readValueAs(Object.class);
						} else if (text == 'sobjectValue') {
							sobjectValue = parser.readValueAs(Object.class);
						} else if (text == 'stringValue') {
							stringValue = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Value consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InputParameters_Z {
		public String name {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public Value_Z value {get;set;} 

		public InputParameters_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'value') {
							value = new Value_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'InputParameters_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class InputParameters {
		public String name {get;set;} 
		public List<ProcessMetadataValues> processMetadataValues {get;set;} 
		public Value value {get;set;} 

		public InputParameters(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'processMetadataValues') {
							processMetadataValues = arrayOfProcessMetadataValues(parser);
						} else if (text == 'value') {
							value = new Value(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'InputParameters consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2Apex_Flow parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex_Flow(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Variables> arrayOfVariables(System.JSONParser p) {
        List<Variables> res = new List<Variables>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Variables(p));
        }
        return res;
    }



    private static List<ProcessMetadataValues> arrayOfProcessMetadataValues(System.JSONParser p) {
        List<ProcessMetadataValues> res = new List<ProcessMetadataValues>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ProcessMetadataValues(p));
        }
        return res;
    }


    private static List<InputParameters> arrayOfInputParameters(System.JSONParser p) {
        List<InputParameters> res = new List<InputParameters>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new InputParameters(p));
        }
        return res;
    }


    private static List<ProcessMetadataValues_Z> arrayOfProcessMetadataValues_Z(System.JSONParser p) {
        List<ProcessMetadataValues_Z> res = new List<ProcessMetadataValues_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ProcessMetadataValues_Z(p));
        }
        return res;
    }


    private static List<Screens> arrayOfScreens(System.JSONParser p) {
        List<Screens> res = new List<Screens>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Screens(p));
        }
        return res;
    }






    private static List<Fields> arrayOfFields(System.JSONParser p) {
        List<Fields> res = new List<Fields>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Fields(p));
        }
        return res;
    }





    private static List<InputParameters_Z> arrayOfInputParameters_Z(System.JSONParser p) {
        List<InputParameters_Z> res = new List<InputParameters_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new InputParameters_Z(p));
        }
        return res;
    }


    private static List<Constants> arrayOfConstants(System.JSONParser p) {
        List<Constants> res = new List<Constants>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Constants(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }



    private static List<ActionCalls> arrayOfActionCalls(System.JSONParser p) {
        List<ActionCalls> res = new List<ActionCalls>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ActionCalls(p));
        }
        return res;
    }












}